/* Continuous Time Bayesian Network Reasoning and Learning Engine
 * Copyright (C) 2009 The Regents of the University of California
 *
 * see docs/AUTHORS for contributor list
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "ctmdp.h"
#include "params.h"
#include <string>

using namespace std;
using namespace ctbn;

namespace {
     int testing_result = 0;
     double kEpsilon = 0.1;
}

#define EXPECT(cond,extra) do { \
        if (!(cond)) {                                                  \
               std::cerr << "Test failure at " << __FILE__ << ":" << __LINE__ \
                      << " in " << __func__ \
                      << ", failed condition is " #cond << extra << std::endl; \
            testing_result = 1; \
        } \
    } while (0)

const int N = 8; // num nodes

double ansexactw[256] = {9.63254, 7.78596, 8.56606, 6.92004, 8.68593, 6.84863, 7.79335, 6.21898, 8.71317, 6.84798, 7.66402, 6.04073, 7.94439, 6.17403, 7.11453, 5.56483, 8.71934, 6.85008, 7.63544, 5.99726, 7.79371, 5.9798, 6.91784, 5.35789, 7.98393, 6.18008, 6.99364, 5.39153, 7.28304, 5.5265, 6.46227, 4.92072, 8.71317, 6.84798, 7.62066, 5.98461, 7.74831, 5.92406, 6.86627, 5.29874, 7.8158, 5.9776, 6.78361, 5.17858, 7.08911, 5.31502, 6.24866, 4.70518, 7.98393, 6.18008, 6.95698, 5.34555, 7.11126, 5.32542, 6.25229, 4.70858, 7.31803, 5.52945, 6.33366, 4.7445, 6.61752, 4.87583, 5.80069, 4.27223, 8.68593, 6.84863, 7.58533, 5.9816, 7.70154, 5.90771, 6.82691, 5.2833, 7.74831, 5.92406, 6.69831, 5.1208, 7.02011, 5.25996, 6.17874, 4.64948, 7.79371, 5.9798, 6.72206, 5.13547, 6.87472, 5.11288, 6.01472, 4.49543, 7.11126, 5.32542, 6.09684, 4.53429, 6.41022, 4.6711, 5.57471, 4.0628, 7.94439, 6.17403, 6.90709, 5.3291, 7.02011, 5.25996, 6.14704, 4.63857, 7.08911, 5.31502, 6.0813, 4.52592, 6.34305, 4.64726, 5.53194, 4.04623, 7.28304, 5.5265, 6.26612, 4.69796, 6.41022, 4.6711, 5.55738, 4.05688, 6.61752, 4.87583, 5.64269, 4.09637, 5.91752, 4.22173, 5.10641, 3.6207, 8.56606, 6.92004, 7.45872, 6.04905, 7.58533, 5.9816, 6.74717, 5.36902, 7.62066, 5.98461, 6.57816, 5.18286, 6.90709, 5.3291, 6.09544, 4.72711, 7.63544, 5.99726, 6.54549, 5.14626, 6.72206, 5.13547, 5.89556, 4.52845, 6.95698, 5.34555, 5.93673, 4.55201, 6.26612, 4.69796, 5.45883, 4.0977, 7.66402, 6.04073, 6.57816, 5.18286, 6.69831, 5.1208, 5.86724, 4.51148, 6.78361, 5.17858, 5.75636, 4.38422, 6.0813, 4.52592, 5.27214, 3.92601, 6.99364, 5.39153, 5.93673, 4.55201, 6.09684, 4.53429, 5.27727, 3.92971, 6.33366, 4.7445, 5.32255, 3.95552, 5.64269, 4.09637, 4.84004, 3.49823, 7.79335, 6.21898, 6.74717, 5.36902, 6.82691, 5.2833, 5.97464, 4.66736, 6.86627, 5.29874, 5.86724, 4.51148, 6.14704, 4.63857, 5.33914, 4.03847, 6.91784, 5.35789, 5.89556, 4.52845, 6.01472, 4.49543, 5.18629, 3.88829, 6.25229, 4.70858, 5.27727, 3.92971, 5.55738, 4.05688, 4.75246, 3.45796, 7.11453, 5.56483, 6.09544, 4.72711, 6.17874, 4.64948, 5.33914, 4.03847, 6.24866, 4.70518, 5.27214, 3.92601, 5.53194, 4.04623, 4.73588, 3.45034, 6.46227, 4.92072, 5.45883, 4.0977, 5.57471, 4.0628, 4.75246, 3.45796, 5.80069, 4.27223, 4.84004, 3.49823, 5.10641, 3.6207, 4.31035, 3.02481};

double ansapproxw[9] = {1.33261, 0.87038, 0.842329, 0.842329, 0.842329, 0.842329, 0.842329, 0.87038, 3.13556};

double ansapprox2w[25] = {1.30476, 0.627514, 0.563126, 0.463021, 0.425532, 0.463021, 0.563126, 0.627514, 3.07002, 0.210335, 0.0389265, 0.122746, 0.0364177, 0.17467, 0.0477463, 0.189393, 0.0349903, 0.189393, 0.0477463, 0.17467, 0.0364177, 0.122746, 0.0389265, 0.210335, 0.0539879};

int ansexactpi[256][2] = {
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{4,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,4}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {8,-1}, {0,-1}, {1,-1}, {0,-1},
	{5,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {5,-1}, {0,-1},
	{3,5}, {0,-1}, {1,-1}, {0,-1}, {5,-1}, {0,-1}, {5,-1}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {8,-1}, {0,-1}, {1,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,6}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {6,-1}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,6}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {6,-1}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {8,-1}, {0,-1}, {1,-1}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {8,-1}, {0,-1}, {1,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,7}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{4,7}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,7}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {1,7}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {1,7}, {0,-1}
};

int ansapproxpi[256][5] = {
	{8,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{4,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,4,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,4,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,4,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{5,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,5,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,5,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,5,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{4,5,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,4,5,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,4,5,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,4,5,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{6,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,6,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,6,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,6,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{4,6,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,4,6,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,4,6,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,4,6,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{5,6,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,5,6,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,5,6,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,5,6,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{4,5,6,-1,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,4,5,6,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{3,4,5,6,-1}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{2,3,4,5,6}, {0,-1,-1,-1,-1}, {1,-1,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1},
	{7,-1,-1,-1,-1}, {0,-1,-1,-1,-1}, {1,7,-1,-1,-1}, {0,-1,-1,-1,-1}
};

int ansapprox2pi[256][2] = {
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{4,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{5,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {5,-1}, {0,-1},
	{3,5}, {0,-1}, {1,-1}, {0,-1}, {5,-1}, {0,-1}, {5,-1}, {0,-1},
	{8,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{3,5}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,6}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {6,-1}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,6}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {6,-1}, {0,-1}, {6,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {2,6}, {0,-1}, {1,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,-1}, {0,-1},
	{6,-1}, {0,-1}, {1,-1}, {0,-1}, {2,6}, {0,-1}, {1,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,7}, {0,-1}, {7,-1}, {0,-1}, {7,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,7}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {1,7}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {4,-1}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {1,7}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,7}, {0,-1},
	{3,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {1,7}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {2,-1}, {0,-1}, {1,7}, {0,-1},
	{7,-1}, {0,-1}, {1,-1}, {0,-1}, {7,-1}, {0,-1}, {1,7}, {0,-1}
};
vector<double> fullvalues(const vector<double> &w,
		const vector<CTMDP::Factor> &bases,
		const Context &allvars) {
	vector<double> ret;
	Instantiation x(allvars,0);
	do {
		double v = 0;
		for(unsigned int i=0;i<bases.size();i++)
			v += bases[i](x)*w[i];
		ret.push_back(v);

	} while(x.Inc());
	return ret;
}

inline string int2str(int i) {
	stringstream ss;
	string ret;
	ss << i;
	ss >> ret;
	return ret;
}


template<int N>
void check(const vector<int> &res, int ans[][N],
		size_t len1, string extra) {
	EXPECT(len1==res.size(),extra);
	for(size_t i=0;i<len1;i++) {
		bool found = false;
		for(int j=0;j<N;j++)
			if (ans[i][j]==res[i]) {
				found = true;
				break;
			}
		EXPECT(found,extra+string(" (i=")+int2str(i)+string(")"));
	}
}

void check(const vector<double> &res, double *ans, size_t len, string extra) {
	EXPECT(len==res.size(),extra);
	for(size_t i=0;i<len;i++) {
		EXPECT(fabs(res[i]-ans[i])<1e-4,extra+string(" (")+int2str(i)+string(")"));
	}
}

int main(int argc, char **argv) {
	InitParams(argc,argv);


	vector<Context> con;
	Context allvars;
	for(int i=0;i<N;i++) {
		Context c;
		c.AddVar(i,2);
		con.push_back(c);
		allvars.AddVar(i,2);
	}

	vector<CTMDP::Factor> r;
	for(int i=0;i<N;i++) {
		CTMDP::Factor f;
		f.var = con[i];
		f.val.push_back(i==0?4:1);
		f.val.push_back(0);
		r.push_back(f);
	}


	CTMDP prob;
	for(int n=0;n<N+1;n++) {
		CTBNDyn dyn;
		for(int i=0;i<N;i++) {
			Context parents(con[(i+1)%N],con[(i+N-1)%N]);
			MarkovDyn x(con[i],parents);
			for(int p=0;p<(N>2?4:2);p++) {
				double q = 0.5+0.5*(((p&1)!=0) + ((p&2)!=0));
				x(p)->Intensity()[1][1] = (i==n) ? -2 : 0;
				x(p)->Intensity()[1][0] = (i==n) ? 2 : 0;
				x(p)->Intensity()[0][1] = q;
				x(p)->Intensity()[0][0] = -q;
			}
			dyn.AddNode(x.Clone());
		}
		if (n==N) { // no-op action gets extra reward
			CTMDP::Factor f;
			f.var = Context();
			f.val.push_back(1.5);
			r.push_back(f);
		}
		prob.AddAction(dyn.Clone(),r);
	}


	vector<CTMDP::Factor> bases;
	for(int i=0;i<N;i++) {
		CTMDP::Factor h;
		h.var = con[i];
		h.val.push_back(1);
		h.val.push_back(0);
		prob.AddBasis(h);
		bases.push_back(h);
	}
	CTMDP::Factor h;
	h.val.push_back(1);
	prob.AddBasis(h); // constant basis
	bases.push_back(h);

	prob.SetBeta(0.85);
	GLPKSolver lpsolver;
	vector<double> exact = prob.SolveExact(&lpsolver);
	check(exact,ansexactw,256," exactw");
	vector<int> exactpi = prob.Policy(exact);
	check(exactpi,ansexactpi,256," exactpi");

	vector<double> approxslow = prob.SolveApprox_exp(&lpsolver);
	check(approxslow,ansapproxw,9," approxw (slow)");
	vector<int> approxslowpi = prob.Policy(approxslow,true);
	check(approxslowpi,ansapproxpi,256," approxpi (slow)");

	vector<double> approx = prob.SolveApprox(&lpsolver);
	check(approx,ansapproxw,9," approxw");
	vector<int> approxpi = prob.Policy(approx,true);
	check(approxpi,ansapproxpi,256," approxpi");


	for(int i=0;i<N;i++) {
		CTMDP::Factor h;
		h.var = con[i]+con[(i+1)%N];
		h.val.push_back(1);
		h.val.push_back(0);
		h.val.push_back(0);
		h.val.push_back(0);
		prob.AddBasis(h);
		bases.push_back(h);
		h.var = con[i]+con[(i+1)%N]+con[(i+2)%N];
		h.val.push_back(0);
		h.val.push_back(0);
		h.val.push_back(0);
		h.val.push_back(0);
		prob.AddBasis(h);
		bases.push_back(h);
	}

	vector<double> approx2slow = prob.SolveApprox_exp(&lpsolver);
	check(approx2slow,ansapprox2w,25," approx2w (slow)");
	vector<int> approx2slowpi = prob.Policy(approx2slow,true);
	check(approx2slowpi,ansapprox2pi,256," approx2pi (slow)");

	vector<double> approx2 = prob.SolveApprox(&lpsolver);
	check(approx2,ansapprox2w,25," approx2w");
	vector<int> approx2pi = prob.Policy(approx2,true);
	check(approx2pi,ansapprox2pi,256," approx2pi");

	if (testing_result==0)
		cout << "PASS decision unittest." << endl;
	return testing_result!=0;

}

